name: CoreDefender MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: coredefender-mlops

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run linting
      run: |
        pip install black flake8 isort mypy
        black --check --diff .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        isort --check-only --diff .
        mypy src/ --ignore-missing-imports
        
    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v -m integration
        
    - name: Run model tests
      run: |
        pytest tests/test_model_performance.py -v -m model
        
    - name: Run security tests
      run: |
        pytest tests/test_api_security.py -v -m security

  build:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.api
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/api:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/api:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop $(docker ps -q)

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        
    - name: Run production tests
      run: |
        echo "Running production tests..."
        # Add production test commands here
        
    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  model-monitoring:
    name: Model Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Run model performance tests
      run: |
        python -m pytest tests/test_model_performance.py -v --tb=short
        
    - name: Check for model drift
      run: |
        python scripts/check_model_drift.py || echo "Model drift detected"
        
    - name: Generate performance report
      run: |
        python scripts/generate_performance_report.py
        
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: reports_and_artifacts/

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup old Docker images
      run: |
        docker system prune -f
        
    - name: Cleanup old artifacts
      run: |
        echo "Cleaning up old artifacts..." 