version: '3.8'

services:
  # Predictive Maintenance API
  predictive-maintenance-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: predictive-maintenance-api-prod
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - MODEL_PATH=/app/models/best_model.pkl
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data:ro
      - ./models:/app/models:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ml-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    networks:
      - ml-network
    depends_on:
      - prometheus

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - predictive-maintenance-api
    restart: unless-stopped
    networks:
      - ml-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis123
    restart: unless-stopped
    networks:
      - ml-network

  # PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    environment:
      POSTGRES_DB: ml_predictions
      POSTGRES_USER: ml_user
      POSTGRES_PASSWORD: ml_password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ml-network

  # Backup service
  backup:
    image: alpine:latest
    container_name: backup-service
    volumes:
      - ./data:/backup/data:ro
      - ./models:/backup/models:ro
      - ./logs:/backup/logs:ro
      - backup_storage:/backup/storage
    command: |
      sh -c "
        while true; do
          echo 'Creating backup at $$(date)'
          tar -czf /backup/storage/backup-$$(date +%Y%m%d-%H%M%S).tar.gz -C /backup data models logs
          find /backup/storage -name 'backup-*.tar.gz' -mtime +7 -delete
          sleep 86400
        done
      "
    restart: unless-stopped
    networks:
      - ml-network

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  postgres_data:
  backup_storage:

networks:
  ml-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 